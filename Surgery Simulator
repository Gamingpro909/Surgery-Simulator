{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4b4463d7-e613-4767-bf0b-5bb17c914ef6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import messagebox\n",
    "\n",
    "# Initial patient conditions and tools\n",
    "patient_condition = {\n",
    "    \"heart_rate\": 100,\n",
    "    \"blood_pressure\": 120,\n",
    "    \"oxygen_level\": 95,\n",
    "    \"pain_level\": 5\n",
    "}\n",
    "\n",
    "surgical_tools = {\n",
    "    \"scalpel\": \"Increases heart rate and blood pressure\",\n",
    "    \"forceps\": \"Decreases oxygen level\",\n",
    "    \"suture\": \"Decreases pain level\",\n",
    "    \"anesthesia\": \"Decreases pain level, reduces heart rate\"\n",
    "}\n",
    "\n",
    "surgery_steps = [\n",
    "    \"Make incision\",\n",
    "    \"Remove tumor\",\n",
    "    \"Suture wound\",\n",
    "    \"Administer anesthesia\"\n",
    "]\n",
    "\n",
    "game_state = {\n",
    "    \"current_step\": 0,\n",
    "    \"patient_alive\": True,\n",
    "    \"surgery_complete\": False\n",
    "}\n",
    "\n",
    "critical_levels = {\n",
    "    \"heart_rate\": 150,\n",
    "    \"blood_pressure\": 180,\n",
    "    \"oxygen_level\": 80\n",
    "}\n",
    "\n",
    "# Function to check patient's vitals and update status\n",
    "def check_patient_status():\n",
    "    if patient_condition[\"heart_rate\"] > critical_levels[\"heart_rate\"] or \\\n",
    "       patient_condition[\"blood_pressure\"] > critical_levels[\"blood_pressure\"] or \\\n",
    "       patient_condition[\"oxygen_level\"] < critical_levels[\"oxygen_level\"]:\n",
    "        game_state[\"patient_alive\"] = False\n",
    "        messagebox.showerror(\"Game Over\", \"Patient has died. Game over.\")\n",
    "        root.quit()\n",
    "\n",
    "# Function to update the condition after tool usage\n",
    "def use_tool(tool):\n",
    "    if tool == \"scalpel\":\n",
    "        patient_condition[\"heart_rate\"] += 10\n",
    "        patient_condition[\"blood_pressure\"] += 5\n",
    "        scalpel_result_label.config(text=f\"Heart rate +10, BP +5\")\n",
    "    elif tool == \"forceps\":\n",
    "        patient_condition[\"oxygen_level\"] -= 5\n",
    "        forceps_result_label.config(text=f\"Oxygen -5\")\n",
    "    elif tool == \"suture\":\n",
    "        patient_condition[\"pain_level\"] -= 2\n",
    "        suture_result_label.config(text=f\"Pain -2\")\n",
    "    elif tool == \"anesthesia\":\n",
    "        patient_condition[\"pain_level\"] -= 5\n",
    "        patient_condition[\"heart_rate\"] -= 5\n",
    "        anesthesia_result_label.config(text=f\"Pain -5, Heart rate -5\")\n",
    "\n",
    "    # Update display of patient's condition\n",
    "    update_patient_display()\n",
    "    check_patient_status()\n",
    "\n",
    "# Move to the next step in surgery\n",
    "def next_step():\n",
    "    if game_state[\"current_step\"] < len(surgery_steps) - 1:\n",
    "        game_state[\"current_step\"] += 1\n",
    "        step_result_label.config(text=f\"Next step: {surgery_steps[game_state['current_step']]}\")\n",
    "    else:\n",
    "        game_state[\"surgery_complete\"] = True\n",
    "        messagebox.showinfo(\"Success\", \"Surgery complete! Patient is recovering.\")\n",
    "        root.quit()\n",
    "\n",
    "# Function to display patient's current condition\n",
    "def update_patient_display():\n",
    "    heart_rate_label.config(text=f\"Heart rate: {patient_condition['heart_rate']}\")\n",
    "    blood_pressure_label.config(text=f\"Blood pressure: {patient_condition['blood_pressure']}\")\n",
    "    oxygen_level_label.config(text=f\"Oxygen level: {patient_condition['oxygen_level']}\")\n",
    "    pain_level_label.config(text=f\"Pain level: {patient_condition['pain_level']}\")\n",
    "\n",
    "# Tkinter GUI Setup\n",
    "root = tk.Tk()\n",
    "root.title(\"Surgery Game\")\n",
    "root.geometry(\"400x550\")  # Set window size\n",
    "root.config(bg=\"#f0f0f0\")  # Background color\n",
    "\n",
    "# Heading Label\n",
    "heading_label = tk.Label(root, text=\"Surgical Operation Simulator\", font=(\"Helvetica\", 16, \"bold\"), bg=\"#f0f0f0\")\n",
    "heading_label.pack(pady=10)\n",
    "\n",
    "# Display current surgery step\n",
    "step_label = tk.Label(root, text=f\"Current step: {surgery_steps[game_state['current_step']]}\", font=(\"Helvetica\", 12))\n",
    "step_label.pack(pady=10)\n",
    "\n",
    "# Display patient's vitals\n",
    "heart_rate_label = tk.Label(root, text=f\"Heart rate: {patient_condition['heart_rate']}\", font=(\"Helvetica\", 10))\n",
    "heart_rate_label.pack()\n",
    "\n",
    "blood_pressure_label = tk.Label(root, text=f\"Blood pressure: {patient_condition['blood_pressure']}\", font=(\"Helvetica\", 10))\n",
    "blood_pressure_label.pack()\n",
    "\n",
    "oxygen_level_label = tk.Label(root, text=f\"Oxygen level: {patient_condition['oxygen_level']}\", font=(\"Helvetica\", 10))\n",
    "oxygen_level_label.pack()\n",
    "\n",
    "pain_level_label = tk.Label(root, text=f\"Pain level: {patient_condition['pain_level']}\", font=(\"Helvetica\", 10))\n",
    "pain_level_label.pack(pady=5)\n",
    "\n",
    "# Buttons for using tools with result labels below each button\n",
    "scalpel_button = tk.Button(root, text=\"Use Scalpel\", command=lambda: use_tool(\"scalpel\"), font=(\"Helvetica\", 10))\n",
    "scalpel_button.pack(pady=5)\n",
    "scalpel_result_label = tk.Label(root, text=\"\", font=(\"Helvetica\", 10), bg=\"#f0f0f0\")\n",
    "scalpel_result_label.pack()\n",
    "\n",
    "forceps_button = tk.Button(root, text=\"Use Forceps\", command=lambda: use_tool(\"forceps\"), font=(\"Helvetica\", 10))\n",
    "forceps_button.pack(pady=5)\n",
    "forceps_result_label = tk.Label(root, text=\"\", font=(\"Helvetica\", 10), bg=\"#f0f0f0\")\n",
    "forceps_result_label.pack()\n",
    "\n",
    "suture_button = tk.Button(root, text=\"Use Suture\", command=lambda: use_tool(\"suture\"), font=(\"Helvetica\", 10))\n",
    "suture_button.pack(pady=5)\n",
    "suture_result_label = tk.Label(root, text=\"\", font=(\"Helvetica\", 10), bg=\"#f0f0f0\")\n",
    "suture_result_label.pack()\n",
    "\n",
    "anesthesia_button = tk.Button(root, text=\"Use Anesthesia\", command=lambda: use_tool(\"anesthesia\"), font=(\"Helvetica\", 10))\n",
    "anesthesia_button.pack(pady=5)\n",
    "anesthesia_result_label = tk.Label(root, text=\"\", font=(\"Helvetica\", 10), bg=\"#f0f0f0\")\n",
    "anesthesia_result_label.pack()\n",
    "\n",
    "# Button to proceed to next surgery step\n",
    "next_button = tk.Button(root, text=\"Next step\", command=next_step, font=(\"Helvetica\", 12))\n",
    "next_button.pack(pady=10)\n",
    "\n",
    "# Label to show the result of moving to the next step\n",
    "step_result_label = tk.Label(root, text=\"\", font=(\"Helvetica\", 12), bg=\"#f0f0f0\")\n",
    "step_result_label.pack(pady=10)\n",
    "\n",
    "# Run the GUI loop\n",
    "update_patient_display()\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fab60d4d-620b-4efd-a494-cc1839343a4d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "82722867-a2a1-4a05-92b7-4639c42142fd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
