import tkinter as tk
from tkinter import messagebox

# Initial patient conditions and tools
patient_condition = {
    "heart_rate": 100,
    "blood_pressure": 120,
    "oxygen_level": 95,
    "pain_level": 5
}

surgical_tools = {
    "scalpel": "Increases heart rate and blood pressure",
    "forceps": "Decreases oxygen level",
    "suture": "Decreases pain level",
    "anesthesia": "Decreases pain level, reduces heart rate"
}

surgery_steps = [
    "Make incision",
    "Remove tumor",
    "Suture wound",
    "Administer anesthesia"
]

game_state = {
    "current_step": 0,
    "patient_alive": True,
    "surgery_complete": False
}

critical_levels = {
    "heart_rate": 150,
    "blood_pressure": 180,
    "oxygen_level": 80
}

# Function to check patient's vitals and update status
def check_patient_status():
    if patient_condition["heart_rate"] > critical_levels["heart_rate"] or \
       patient_condition["blood_pressure"] > critical_levels["blood_pressure"] or \
       patient_condition["oxygen_level"] < critical_levels["oxygen_level"]:
        game_state["patient_alive"] = False
        messagebox.showerror("Game Over", "Patient has died. Game over.")
        root.quit()

# Function to update the condition after tool usage
def use_tool(tool):
    if tool == "scalpel":
        patient_condition["heart_rate"] += 10
        patient_condition["blood_pressure"] += 5
        scalpel_result_label.config(text=f"Heart rate +10, BP +5")
    elif tool == "forceps":
        patient_condition["oxygen_level"] -= 5
        forceps_result_label.config(text=f"Oxygen -5")
    elif tool == "suture":
        patient_condition["pain_level"] -= 2
        suture_result_label.config(text=f"Pain -2")
    elif tool == "anesthesia":
        patient_condition["pain_level"] -= 5
        patient_condition["heart_rate"] -= 5
        anesthesia_result_label.config(text=f"Pain -5, Heart rate -5")

    # Update display of patient's condition
    update_patient_display()
    check_patient_status()

# Move to the next step in surgery
def next_step():
    if game_state["current_step"] < len(surgery_steps) - 1:
        game_state["current_step"] += 1
        step_result_label.config(text=f"Next step: {surgery_steps[game_state['current_step']]}")
    else:
        game_state["surgery_complete"] = True
        messagebox.showinfo("Success", "Surgery complete! Patient is recovering.")
        root.quit()

# Function to display patient's current condition
def update_patient_display():
    heart_rate_label.config(text=f"Heart rate: {patient_condition['heart_rate']}")
    blood_pressure_label.config(text=f"Blood pressure: {patient_condition['blood_pressure']}")
    oxygen_level_label.config(text=f"Oxygen level: {patient_condition['oxygen_level']}")
    pain_level_label.config(text=f"Pain level: {patient_condition['pain_level']}")

# Tkinter GUI Setup
root = tk.Tk()
root.title("Surgery Game")
root.geometry("400x550")  # Set window size
root.config(bg="#f0f0f0")  # Background color

# Heading Label
heading_label = tk.Label(root, text="Surgical Operation Simulator", font=("Helvetica", 16, "bold"), bg="#f0f0f0")
heading_label.pack(pady=10)

# Display current surgery step
step_label = tk.Label(root, text=f"Current step: {surgery_steps[game_state['current_step']]}", font=("Helvetica", 12))
step_label.pack(pady=10)

# Display patient's vitals
heart_rate_label = tk.Label(root, text=f"Heart rate: {patient_condition['heart_rate']}", font=("Helvetica", 10))
heart_rate_label.pack()

blood_pressure_label = tk.Label(root, text=f"Blood pressure: {patient_condition['blood_pressure']}", font=("Helvetica", 10))
blood_pressure_label.pack()

oxygen_level_label = tk.Label(root, text=f"Oxygen level: {patient_condition['oxygen_level']}", font=("Helvetica", 10))
oxygen_level_label.pack()

pain_level_label = tk.Label(root, text=f"Pain level: {patient_condition['pain_level']}", font=("Helvetica", 10))
pain_level_label.pack(pady=5)

# Buttons for using tools with result labels below each button
scalpel_button = tk.Button(root, text="Use Scalpel", command=lambda: use_tool("scalpel"), font=("Helvetica", 10))
scalpel_button.pack(pady=5)
scalpel_result_label = tk.Label(root, text="", font=("Helvetica", 10), bg="#f0f0f0")
scalpel_result_label.pack()

forceps_button = tk.Button(root, text="Use Forceps", command=lambda: use_tool("forceps"), font=("Helvetica", 10))
forceps_button.pack(pady=5)
forceps_result_label = tk.Label(root, text="", font=("Helvetica", 10), bg="#f0f0f0")
forceps_result_label.pack()

suture_button = tk.Button(root, text="Use Suture", command=lambda: use_tool("suture"), font=("Helvetica", 10))
suture_button.pack(pady=5)
suture_result_label = tk.Label(root, text="", font=("Helvetica", 10), bg="#f0f0f0")
suture_result_label.pack()

anesthesia_button = tk.Button(root, text="Use Anesthesia", command=lambda: use_tool("anesthesia"), font=("Helvetica", 10))
anesthesia_button.pack(pady=5)
anesthesia_result_label = tk.Label(root, text="", font=("Helvetica", 10), bg="#f0f0f0")
anesthesia_result_label.pack()

# Button to proceed to next surgery step
next_button = tk.Button(root, text="Next step", command=next_step, font=("Helvetica", 12))
next_button.pack(pady=10)

# Label to show the result of moving to the next step
step_result_label = tk.Label(root, text="", font=("Helvetica", 12), bg="#f0f0f0")
step_result_label.pack(pady=10)

# Run the GUI loop
update_patient_display()
root.mainloop()
